{
    "h2" : "Introduction in Whisker",
    "h4" : "Simple creation of a test suite for a Scratch project",
    "example" : "Example: ",
    "download" : "Material: ",
    "step01-title" : "Scratch project",
    "step01-description" : "Download the Scratch project that you want to analyze and save it on your computer. It'll be stored as *.sb3 file. In the Scratch IDE choose the menu entry file -> 'save to your computer'.",
    "step01-example" : "In this tutorial we use the Scratch project 'Fruit-Catching'. The game creates clones of the sprites 'Apple' and 'Banana' and lets them fall from heaven. With the Bowl on the ground, the player has to catch these falling fruits.",
    
    "step02-title" : "Upload project to Whisker",
    "step02-description" : "Upload the stored *.sb3 file to whisker in the 'Uploads' tab. You can leave the sections 'Your test file' and 'Your model' (extended view).",
    "step02-example" : "Choose the file 'FruitCatching.sb3' from your computer.",
    
    "step03-title" : "My project",
    "step03-description" : "Switch to tab 'My project'. You can see the uploaded Scratch project and a empty list with your not yet written tests.",
    "step03-example" : "You can see the initial stage of the 'Fruit-Catching' project.",
    
    "step04-title" : "My tests",
    "step04-description" : "Click on the tab 'test editor'. In the editor input field you can write JavaScript tests for your test suite. On the right side you find common code snippets. Each time you upload a new *.sb3 file with no tests written yet, the base structure of your first test case is automatically created (you may invoke one click into the editor window).",
    "step04-example" : "This automatically generated test structure is the same for all Scratch projects.",
    
    "step05-title" : "The first test",
    "step05-description" : "Delete the method body of the autogenerated test case and rename the method. Insert a description for the test too.",
    "step05-example" : "Rename the autogenerated test in 'testVariableInitialization' and delete its method body except the last line. You have to insert your test method in the 'module.exports' section so that Whisker runs your test case. Change the method identifier in this section too. Insert the name 'Variable Initialization Test'. Please change the description to 'This method tests the initialization of variable values for time and score. Variable time must start at 30, score must start at 0.'",
    "step05-code" : "const testVariableInitialization = async function (t) {\n\n\n    t.end();\n}\n\nmodule.exports = [\n    {\n        test: testVariableInitialization,\n        name: 'Variable Initialization Test',\n        description: 'This method tests the initialization of variable \n                      values for time and score. Variable time must start \n                      at 30, score must start at 0.',\n        categories: []\n    }\n];",
    
    "step06-title" : "Create simple tests",
    "step06-description" : "Use the common code snippets as an orientation and write your first simple test.",
    "step06-example" : "To access to a variable, you have to use the test driver object. In Scratch variables can be globally or just for one sprite. In this example, we access the two variables of the stage. First fetch a reference on the stage and then access the attribute value. Both code snippets you can also find in the list rightside.",
    "step06-code" : "const testVariableInitialization = async function (t) {\n    let stage = t.getStage();\n    let time = stage.getVariable('time');\n    let score = stage.getVariable('score');\n    t.end();\n}",
    
    "step07-title" : "Check conditions",
    "step07-description" : "Base of each test is condition checking. A test fails if a certain condition is not fulfilled.",
    "step07-example" : "In our example, we want to check, if clicking on the green flag sets the countdown to 30 seconds and the score to 0. The Scratch project needs some time for initialization (e.g. 500ms). Next we use the assert method of the test driver object to check, if the specific condition is fulfilled right after starting the game. If you want to read more about assertions, please choose the corresponding entry in the list of common code snippets.",
    "step07-code" : "const testVariableInitialization = async function (t) {\n    let stage = t.getStage();\n    let time = stage.getVariable('time');\n    let score = stage.getVariable('score');\n    await t.runForTime(500); // short time for game initialization\n    t.assert.ok(time.value == 30 || time.value == 29, 'Time starts at 30s.');\n    t.assert.equal(score.value, 0, 'Score must start at 0.');\n    t.end();\n}",
    
    "step08-title" : "Load tests",
    "step08-description" : "When a test method is ready to be executed, you can load it into your test suite by clicking on the refresh button on the left. If the test code is syntactically correct, Whisker adds the method to your test suite. If it runs in a compiler error, a popup shows you information on the problem.",
    
    "step09-title" : "Execute tests",
    "step09-description" : "After you have added the test method to your test suite, you can switch to the tab 'my project'. In the test table you can see your test method. Now you can either use the play button on the left side to start the whole test suite or the play button next to your test to just start this single test case. In the test table you can see if the test failed or not. In case of a test error you can check the tab 'console log' (extended view) to get detailed information on the error.",
    
    "download-examples" : "Project examples and corresponding test suites",
    "download-examples-description" : "We offer you some Scratch projects and complete test suites as an orientation. You can download and try them out."
}

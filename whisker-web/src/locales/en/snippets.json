{
    "snippet01-title" : "general structure of tests",
    "snippet01-tooltip" : "Each test is written as independant function. The parameter value is a very powerful test driver object.",
    "snippet01-helptext01" : "Each test is written as independant function. Insert any function name you want (here 'myTest01' and 'myTest02').",
    "snippet01-helptext02" : "The parameter value is the test driver object. Use its methods in your test cases. You get more information about the test driver object in the other code snippets.",
    "snippet01-helptext03" : "Each time you create a test, you have to add it to the list of executable tests. Each time you edit a test, you have to update your test suite too. Starting your test suite will start this test and all other tests in the list.",
    "snippet01-code" : "const myTest01 = async function (t) {\n    /* ... */\n}\nconst myTest02 = async function (t) {\n    /* ... */\n}\nmodule.exports = [\n    {\n        test: myTest01,\n        name: 'My first Test'\n    },\n    {\n        test: myTest02,\n        name: 'My second Test'\n    }\n];",
    "snippet01-shortcode" : "const myTest = async function(t) {\n   /* your code here */\n    t.end();\n}",
    
    "snippet02-title" : "get sprites",
    "snippet02-tooltip" : "This snippet shows you how to get sprite objects to access their attributes.",
    "snippet02-helptext01" : "In many cases you want to check, if a sprite moves or fulfills other characteristics after the Scratch project is started.",
    "snippet02-helptext02" : "Therefore you first need access to the sprite and its attributes.",
    "snippet02-helptext03" : "Define a new variable with a arbitrary name (here 'mySprite01' and 'mySprite02') and use the test driver object to get a reference on the sprite with the name 'spriteName'.",
    "snippet02-helptext04" : "You can get a reference on a sprite at a specific position (here at coordinates (50|100)), too.",
    "snippet02-helptext05" : "Using the reference it's possible to get the sprite position or other interesting attributes. Many other useful examples for sprite references are listed in the snippets below.",
    "snippet02-code" : "const myTest01 = async function (t) {\n    let mySprite01 = t.getSprite('spriteName');\n    let mySprite02 = t.getSpriteAtPoint(50, 100);\n}",
    "snippet02-shortcode" : "let mySprite = t.getSprite('spriteName');",
    
    "snippet03-title" : "get stage",
    "snippet03-tooltip" : "The example shows how to reference the stage object.",
    "snippet03-helptext01" : "It's often necessary to check if the stage changes or has a specific attribute after clicking on the green flag.",
    "snippet03-helptext02" : "To do this you first need a reference on the stage object an all its attributes.",
    "snippet03-helptext03" : "First define a new variable with an arbitrary name (here 'myStage') and then get a stage reference from the test driver object.",
    "snippet03-helptext04" : "Next you can access for example the background image of the stage. Many other useful examples for the stage reference are listed in the snippets below.",
    "snippet03-code" : "const myTest01 = async function (t) {\n    let myStage = t.getStage();\n}",
    "snippet03-shortcode" : "let myStage = t.getStage();",
    
    "snippet04-title" : "sprite attributes",
    "snippet04-tooltip" : "This code snippet explains how to access the most important attributes of sprites.",
    "snippet04-helptext01" : "Each Scratch sprite has the following attributes. You can access their values directly.",
    "snippet04-helptext02" : "name",
    "snippet04-helptext03" : "id",
    "snippet04-helptext04" : "position (x-coordinate, y-coordinate)",
    "snippet04-helptext05" : "direction",
    "snippet04-helptext06" : "visibility",
    "snippet04-helptext07" : "size",
    "snippet04-helptext08" : "name of the current costume",
    "snippet04-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    let name = mySprite.name;\n    let id = mySprite.id;\n    let x = mySprite.x;\n    let y = mySprite.y;\n    let direction = mySprite.direction;\n    let visibility = mySprite.visible;\n    let size = mySprite.size;\n    let currCostume = mySprite.currCostume;\n}",
    "snippet04-shortcode" : "let mySprite = t.getSprite('spriteName');\nlet name = mySprite.name;\nlet id = mySprite.id;\nlet x = mySprite.x;\nlet y = mySprite.y;\nlet direction = mySprite.direction;\nlet visibility = mySprite.visible;\nlet size = mySprite.size;\nlet currCostume = mySprite.currCostume;",
    
    "snippet05-title" : "stage attributes",
    "snippet05-tooltip" : "This code snippet explains how to access the most important attributes of the stage.",
    "snippet05-helptext01" : "The stage object has the following attributes. You can access their values directly.",
    "snippet05-helptext02" : "name",
    "snippet05-helptext03" : "id",
    "snippet05-helptext04" : "name of the current costume",
    "snippet05-code" : "const myTest01 = async function (t) {\n    let myStage = t.getStage();\n    let name = myStage.name;\n    let id = myStage.id;\n    let currCostume = myStage.currCostume;\n}",
    "snippet05-shortcode" : "let myStage = t.getStage();\nlet name = myStage.name;\nlet id = myStage.id;\nlet currCostume = myStage.currCostume;",
    
    "snippet06-title" : "get or set attribute values",
    "snippet06-tooltip" : "You get to know with certain tools for processing or editing sprite attributes.",
    "snippet06-helptext01" : "It's easy to access attribute values of a sprite.",
    "snippet06-helptext02" : "You can also get or set values of global variables.",
    "snippet06-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    let var = mySprite.getVariable('varName');\n    let list = mySprite.getList('listName');\n}",
    "snippet06-shortcode" : "let mySprite = t.getSprite('spriteName');\nlet var = mySprite.getVariable('varName');\nlet list = mySprite.getList('listName');",
    
    "snippet07-title" : "delay",
    "snippet07-tooltip" : "It can be useful to wait for a certain time for some condition during a test run.",
    "snippet07-helptext01" : "With the method runForTime(time) you can easily pause the test run at a certain position for the specified timespan.",
    "snippet07-helptext02" : "You can also wait for a condition to be fulfilled. If you use this method, it's necessary to specify a timeout to resume the test run, if the condition will never be fulfilled.",
    "snippet07-code" : "const myTest01 = async function (t) {\n    await t.runForTime(500); // wait 500 milliseconds\n    \n    let mySprite = t.getSprite('spriteName');\n    // wait until sprite is at start position (0|0)\n    await t.runUntil(() => mySprite.x === 0 && mySprite.y === 0, 2000);\n}",
    "snippet07-shortcode" : "await t.runForTime(500);\nlet mySprite = t.getSprite('spriteName');\nawait t.runUntil(() => mySprite.x === 0, 500);",
    
    "snippet08-title" : "condition check",
    "snippet08-tooltip" : "Base of all test cases is to check if certain conditions are fulfilled or not.",
    "snippet08-helptext01" : "Usually you first get a reference to a sprite or the stage. Next you fetch the attribute values and check them.",
    "snippet08-helptext02" : "Existing conditions can be checked for their logic value. You can also compare two numeric values.",
    "snippet08-helptext03" : "For each assertion it's useful to add a text message which is show, if the condition check fails.",
    "snippet08-code" : "const myTest01 = async function(t) {\n    let mySprite = t.getSprite('spriteName');\n    t.assert.ok(mySprite.visible == true, 'Sprite should be visible.');\n    t.assert.not(mySprite.currCostume == 'costume2', 'Sprite should not wear costume2.');\n    t.assert.equal(mySprite.x, 0, 'Sprites x-position should be 0.');\n    t.assert.greater(mySprite.y, 0, 'Sprites y-position should be greater than 0.');\n    t.assert.less(mySprite.size, 30, 'Sprites size should be less than 30.');   \n}",
    "snippet08-shortcode" : "let mySprite = t.getSprite('spriteName');\nt.assert.ok(mySprite.visible == true, '...');\nt.assert.not(mySprite.currCostume == 'costume2', '...');\nt.assert.equal(mySprite.x, 0, '...');\nt.assert.greater(mySprite.y, 0, '...');\nt.assert.less(mySprite.size, 30, '...');",
    
    "snippet09-title" : "user interaction",
    "snippet09-tooltip" : "To check some projects, it's necessary to simulate user interactions like keyboard or mouse inputs. The most important interactions are listed here.",
    "snippet09-helptext01" : "Scratch projects often wait for user interactions (e.g. mouse or keyboard inputs). In your Whisker test run you can simulate inputs and check if the project reacts correct.",
    "snippet09-helptext02" : "You can invoke single clicks, clicks on sprites or on the stage, clicks on start or stop and keyboard hits for all keys.",
    "snippet09-helptext03" : "Some methods accept an optional parameter which specifies the number of steps, an action should be executed. Steps are the time unit Scratch uses internally. One step equates to 33ms, 30 steps are one second.",
    "snippet09-code" : "const myTest01 = async function (t) {\n    // Start the game via click on green flag.\n    t.greenFlag();\n    \n    // Invoke a click on the stage.\n    t.clickStage();\n    \n    // Click on the sprite with name spriteName for 500ms.\n    t.clickSprite('spriteName', 15);\n    \n    let mySprite = t.getSprite('spriteName');\n    const clones = mySprite.getClones();\n    // Click on the first clone of sprite with name spriteName for 1secs.\n    t.clickClone(clones[0], 30);\n    \n    // Click on clone at position (30|60) for 100ms.\n    t.clickCloneByCoords(30, 60, 3);\n    \n    // Drag the sprite with the name spriteName to the position (90|-70)\n    t.dragSprite('spriteName', 90, -70);\n\n    // Press key 'left arrow' for 330ms. Keys are named in usual form.\n    t.keyPress('left arrow', 10);\n\n    // Release key 'A'.\n    t.keyRelease('A');\n\n    // Invoke a mouse down click\n    t.mouseDown(true);\n    \n    // Move the mouse from the current position to (-10|30) during 18 steps (= 600ms).\n    t.mouseMove(-10, 30, 18);\n\n    t.end();\n}",
    "snippet09-shortcode" : "t.greenFlag();\nt.clickStage();\nt.clickSprite('spriteName', 15);\nlet mySprite = t.getSprite('spriteName');\nconst clones = mySprite.getClones();\nt.clickClone(clones[0], 30);\nt.clickCloneByCoords(30, 60, 3);\nt.dragSprite('spriteName', 90, -70);\nt.keyPress('left arrow', 10);\nt.keyRelease('A');\nt.mouseDown(true);\nt.mouseMove(-10, 30, 18);",
    
    "snippet10-title" : "get clones",
    "snippet10-tooltip" : "If there exist some clones of a sprite, you can get references on a clone list to access their attributes.",
    "snippet10-helptext01" : "First fetch the sprite reference and then access its clone list.",
    "snippet10-helptext02" : "Before accessing the single clones, you have to check, if there exist some clones to not invoke a nullpointer exception.",
    "snippet10-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    const clones = mySprite.getClones();\n    if(clones.length > 0)\n    {\n        let firstClone = clones[0];\n    }\n    t.end();\n}",
    "snippet10-shortcode" : "let mySprite = t.getSprite('spriteName');\nconst clones = mySprite.getClones();\nlet firstClone = clones[0];",
    
    "snippet11-title" : "check touching",
    "snippet11-tooltip" : "You can check with different methods, if a sprite touches another sprite or object.",
    "snippet11-helptext01" : "Fetch the reference on a sprite e.g. by using its name.",
    "snippet11-helptext02" : "Now it's possible to check, if the sprite is at a specific position or if it touches the mouse pointer, another sprite or some color.",
    "snippet11-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    \n    // Check if sprite with name 'spriteName' is touching point (20|40).\n    mySprite.isPointInBounds(20, 40);\n\n    // Check if sprite with name 'spriteName' is touching the mouse pointer.\n    mySprite.isTouchingMouse();\n\n    // Check if sprite with name 'spriteName' is touching sprite with name 'spriteName2'.\n    mySprite.isTouchingSprite('spriteName2');\n    \n    // Check if sprite with name 'spriteName' is touching the color white = RGB(255, 255, 255). \n    mySprite.isTouchingColor([255,255,255]);\n\n    t.end();\n}",
    "snippet11-shortcode" : "let mySprite = t.getSprite('spriteName');\nmySprite.isPointInBounds(20, 40);\nmySprite.isTouchingMouse();\nmySprite.isTouchingSprite('spriteName2');\nmySprite.isTouchingColor([255,255,255]);"
}

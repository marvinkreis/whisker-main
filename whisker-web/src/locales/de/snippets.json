{
    "snippet01-title" : "Grundstruktur eines Tests",
    "snippet01-tooltip" : "Jeder Test wird als separate Funktion geschrieben. Als Übergabeparameter erhält die Funktion ein sehr mächtiges TestDriver Objekt.",
    "snippet01-helptext01" : "Jeder Test wird als eigenständige Funktion geschrieben. Den Namen des Tests (hier 'myTest01' und 'myTest02') kannst du beliebig wählen.",
    "snippet01-helptext02" : "Als Parameter erhält die Funktion das sogenannte Test Driver Objekt. Mit diesem sehr nützlichen Objekt kannst du während des Tests arbeiten. Mehr dazu erfährst du in den anderen Codesnippets.",
    "snippet01-helptext03" : "Sobald du eine Test erstellt hast, musst du ihn zur Liste der auszuführenden Tests hinzufügen. Wird Whisker anschließend aufgerufen, wird dieser Test ebenfalls durchgeführt.",
    "snippet01-code" : "const myTest01 = async function (t) {\n    /* ... */\n}\nconst myTest02 = async function (t) {\n    /* ... */\n}\nmodule.exports = [\n    {\n        test: myTest01,\n        name: 'My first Test'\n    },\n    {\n        test: myTest02,\n        name: 'My second Test'\n    }\n];",
    "snippet01-shortcode" : "const myTest = async function(t) {\n   /* your code here */\n    t.end();\n}",
    
    "snippet02-title" : "Sprite abfragen",
    "snippet02-tooltip" : "Du erfährst hier mehr darüber, wie du Sprite-Objekte abfragen kannst.",
    "snippet02-helptext01" : "Oft soll überprüft werden, ob sich ein Sprite nach Starten des Projekts bewegt oder eine andere Eigenschaft erfüllt.",
    "snippet02-helptext02" : "Dazu wird jedoch zuerst Zugriff auf das Sprite und all seine Attribute benötigt.",
    "snippet02-helptext03" : "Definiere zuerst eine neue Variable mit einem beliebigen Namen (hier 'mySprite01' und 'mySprite02') und nutze anschließend das TestDriver Objekt, um das Sprite namens 'spriteName' zu referenzieren.",
    "snippet02-helptext04" : "Alternativ kannst du auch eine Referenz auf ein Sprite erhalten, das sich an einer bestimmten Position befindet (hier bei den Koordinaten (50|100)).",
    "snippet02-helptext05" : "Anschließend ist es bspw. möglich, auf die Position des Sprites zuzugreifen und sie für verschiedene Tests heranzuziehen. Viele weitere nützliche Verwendungszwecke findest du in den anderen Codesnippets.",
    "snippet02-code" : "const myTest01 = async function (t) {\n    let mySprite01 = t.getSprite('spriteName');\n    let mySprite02 = t.getSpriteAtPoint(50, 100);\n}",
    "snippet02-shortcode" : "let mySprite = t.getSprite('spriteName');",
    
    "snippet03-title" : "Bühnenbild abfragen",
    "snippet03-tooltip" : "Hier lernst du, wie du auf das Bühnenobjekt zugreifen kannst.",
    "snippet03-helptext01" : "Oft soll überprüft werden, ob sich die Bühne nach Starten des Spiels verändert oder eine bestimmte Eigenschaft aufweist.",
    "snippet03-helptext02" : "Dazu wird jedoch zuerst Zugriff auf die Bühne und all ihre Attribute benötigt.",
    "snippet03-helptext03" : "Definiere zuerst eine neue Variable mit einem beliebigen Namen (hier 'myStage') und nutze anschließend das TestDriver Objekt, um eine Referenz auf die Bühne zu erhalten.",
    "snippet03-helptext04" : "Anschließend ist es bspw. möglich, auf das Bühnenbild der Bühne zuzugreifen. Viele weitere nützliche Verwendungszwecke findest du in den anderen Codesnippets.",
    "snippet03-code" : "const myTest01 = async function (t) {\n    let myStage = t.getStage();\n}",
    "snippet03-shortcode" : "let myStage = t.getStage();",
    
    "snippet04-title" : "Attribute eines Sprites",
    "snippet04-tooltip" : "Die wichtigsten Attribute eines Sprites und wie du auf sie zugreifst, wird hier erklärt.",
    "snippet04-helptext01" : "Folgende wichtige Attribute weist ein Sprite Objekt auf. Auf die einzelnen Eigenschaften kann direkt per Punktnotation zugegriffen werden.",
    "snippet04-helptext02" : "Name",
    "snippet04-helptext03" : "Id",
    "snippet04-helptext04" : "Position (x-Koordinate, y-Koordinate)",
    "snippet04-helptext05" : "Blickrichtung",
    "snippet04-helptext06" : "Sichtbarkeit",
    "snippet04-helptext07" : "Größe",
    "snippet04-helptext08" : "Name des aktuellen Kostüms",
    "snippet04-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    let name = mySprite.name;\n    let id = mySprite.id;\n    let x = mySprite.x;\n    let y = mySprite.y;\n    let direction = mySprite.direction;\n    let visibility = mySprite.visible;\n    let size = mySprite.size;\n    let currCostume = mySprite.currCostume;\n}",
    "snippet04-shortcode" : "let mySprite = t.getSprite('spriteName');\nlet name = mySprite.name;\nlet id = mySprite.id;\nlet x = mySprite.x;\nlet y = mySprite.y;\nlet direction = mySprite.direction;\nlet visibility = mySprite.visible;\nlet size = mySprite.size;\nlet currCostume = mySprite.currCostume;",
    
    "snippet05-title" : "Attribute der Bühne",
    "snippet05-tooltip" : "Wie du die Attribute der Bühne verwenden kannst, erfährst du hier.",
    "snippet05-helptext01" : "Folgende wichtige Attribute weist das Bühnenobjekt auf. Auf die einzelnen Eigenschaften kann direkt per Punktnotation zugegriffen werden.",
    "snippet05-helptext02" : "Name",
    "snippet05-helptext03" : "Id",
    "snippet05-helptext04" : "Name des aktuellen Kostüms",
    "snippet05-code" : "const myTest01 = async function (t) {\n    let myStage = t.getStage();\n    let name = myStage.name;\n    let id = myStage.id;\n    let currCostume = myStage.currCostume;\n}",
    "snippet05-shortcode" : "let myStage = t.getStage();\nlet name = myStage.name;\nlet id = myStage.id;\nlet currCostume = myStage.currCostume;",
    
    "snippet06-title" : "Attribute abrufen und setzen",
    "snippet06-tooltip" : "Hier erhältst du verschiedene Werkzeuge zum Abrufen und Bearbeiten der Variablen von Sprites.",
    "snippet06-helptext01" : "Auf die Variable eines Sprites kannst du einfach zugreifen oder sie auch setzen.",
    "snippet06-helptext02" : "Zudem kannst du auch die Werte von globalen Variablen auslesen und festlegen.",
    "snippet06-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    let var = mySprite.getVariable('varName');\n    let list = mySprite.getList('listName');\n}",
    "snippet06-shortcode" : "let mySprite = t.getSprite('spriteName');\nlet var = mySprite.getVariable('varName');\nlet list = mySprite.getList('listName');",
    
    "snippet07-title" : "Wartefunktion",
    "snippet07-tooltip" : "Oft ist es sinnvoll, bei einem Testdurchlauf eine gewisse Zeit auf das Eintreten einer Bedingung zu warten.",
    "snippet07-helptext01" : "Mit der Methode runForTime(time) kannst du ganz einfach die Anzahl an Millisekunden angeben, die an einer bestimmten Stelle im Programmablauf gewartet werden soll.",
    "snippet07-helptext02" : "Natürlich kannst du auch auf das Eintreten einer Bedingung warten. Bei dieser Methode muss stets ein Timeout angegeben werden, sodass bei Nichteintreten der Bedingung kein endloser Wartezustand entsteht.",
    "snippet07-code" : "const myTest01 = async function (t) {\n    await t.runForTime(500); // wait 500 milliseconds\n    \n    let mySprite = t.getSprite('spriteName');\n    // wait until sprite is at start position (0|0)\n    await t.runUntil(() => mySprite.x === 0 && mySprite.y === 0, 2000);\n}",
    "snippet07-shortcode" : "await t.runForTime(500);\nlet mySprite = t.getSprite('spriteName');\nawait t.runUntil(() => mySprite.x === 0, 500);",
    
    "snippet08-title" : "Bedingungsüberprüfung",
    "snippet08-tooltip" : "Grundlage aller Tests ist die Überprüfung verschiedener vorliegender Bedingungen zu einem bestimmten Zeitpunkt.",
    "snippet08-helptext01" : "Üblicherweise werden zuerst Attribute von Sprites oder der Bühne abgefragt und anschließend auf deren 'Richtigkeit' überprüft.",
    "snippet08-helptext02" : "Dabei können entweder vorhandene Bedingungen direkt auf ihren Wahrheitswert überprüft oder zwei numerische Werte verglichen werden.",
    "snippet08-helptext03" : "Jeder Überprüfung wird eine Textnachricht angefügt, welche beim Fehlschlagen angezeigt wird.",
    "snippet08-code" : "const myTest01 = async function(t) {\n    let mySprite = t.getSprite('spriteName');\n    t.assert.ok(mySprite.visible == true, 'Sprite should be visible.');\n    t.assert.not(mySprite.currCostume == 'costume2', 'Sprite should not wear costume2.');\n    t.assert.equal(mySprite.x, 0, 'Sprites x-position should be 0.');\n    t.assert.greater(mySprite.y, 0, 'Sprites y-position should be greater than 0.');\n    t.assert.less(mySprite.size, 30, 'Sprites size should be less than 30.');   \n}",
    "snippet08-shortcode" : "let mySprite = t.getSprite('spriteName');\nt.assert.ok(mySprite.visible == true, '...');\nt.assert.not(mySprite.currCostume == 'costume2', '...');\nt.assert.equal(mySprite.x, 0, '...');\nt.assert.greater(mySprite.y, 0, '...');\nt.assert.less(mySprite.size, 30, '...');",
    
    "snippet09-title" : "Benutzerinteraktion",
    "snippet09-tooltip" : "Um ein Projekt zu testen, müssen manchmal Benutzereingaben simuliert werden. Hier findest du die wichtigsten.",
    "snippet09-helptext01" : "In Scratch finden oft Interaktionen mit dem Benutzer via Maus- oder Tastatureingaben statt. Diese kannst du beim Testen simulieren, um zu überprüfen, ob sich das Geschehen im Projekt wie gewünscht verhält.",
    "snippet09-helptext02" : "Dabei können Mausklicks, Klicks auf Sprites, Klicks auf Start oder Stop sowie Tastatureingaben simuliert werden.",
    "snippet09-helptext03" : "Manche Methoden erwarten als (optionalen) Parameter die Anzahl an Schritten, die eine Aktion ausgeführt werden soll. Schritte (oder steps) sind dabei die interne Zeiteinheit von Scratch. Ein Schritt entspricht etwa 33ms, somit sind 30 Schritte ca. eine ganze Sekunde.",
    "snippet09-code" : "const myTest01 = async function (t) {\n    // Start the game via click on green flag.\n    t.greenFlag();\n    \n    // Invoke a click on the stage.\n    t.clickStage();\n    \n    // Click on the sprite with name spriteName for 500ms.\n    t.clickSprite('spriteName', 15);\n    \n    let mySprite = t.getSprite('spriteName');\n    const clones = mySprite.getClones();\n    // Click on the first clone of sprite with name spriteName for 1secs.\n    t.clickClone(clones[0], 30);\n    \n    // Click on clone at position (30|60) for 100ms.\n    t.clickCloneByCoords(30, 60, 3);\n    \n    // Drag the sprite with the name spriteName to the position (90|-70)\n    t.dragSprite('spriteName', 90, -70);\n\n    // Press key 'left arrow' for 330ms. Keys are named in usual form.\n    t.keyPress('left arrow', 10);\n\n    // Release key 'A'.\n    t.keyRelease('A');\n\n    // Invoke a mouse down click\n    t.mouseDown(true);\n    \n    // Move the mouse from the current position to (-10|30) during 18 steps (= 600ms).\n    t.mouseMove(-10, 30, 18);\n\n    t.end();\n}",
    "snippet09-shortcode" : "t.greenFlag();\nt.clickStage();\nt.clickSprite('spriteName', 15);\nlet mySprite = t.getSprite('spriteName');\nconst clones = mySprite.getClones();\nt.clickClone(clones[0], 30);\nt.clickCloneByCoords(30, 60, 3);\nt.dragSprite('spriteName', 90, -70);\nt.keyPress('left arrow', 10);\nt.keyRelease('A');\nt.mouseDown(true);\nt.mouseMove(-10, 30, 18);",
    
    "snippet10-title" : "Klone abfragen",
    "snippet10-tooltip" : "Von einem Sprite kannst du alle vorhandenen Klone abfragen und natürlich auch auf deren Eigenschaften zugreifen.",
    "snippet10-helptext01" : "Hole dir dazu zuerst ein beliebiges Sprite über seinen Bezeichner. Greife anschließend auf die Liste seiner Klone zu.",
    "snippet10-helptext02" : "Überprüfe nun, ob von diesem Sprite überhaupt Klone existieren und arbeite ggf. mit den einzelnen Klonen weiter.",
    "snippet10-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    const clones = mySprite.getClones();\n    if(clones.length > 0)\n    {\n        let firstClone = clones[0];\n    }\n    t.end();\n}",
    "snippet10-shortcode" : "let mySprite = t.getSprite('spriteName');\nconst clones = mySprite.getClones();\nlet firstClone = clones[0];",
    
    "snippet11-title" : "Berührung überprüfen",
    "snippet11-tooltip" : "Du kannst mit verschiedenen Methoden überprüfen, was ein Sprite gerade berührt (oder auch nicht).",
    "snippet11-helptext01" : "Hole dir dazu zuerst ein beliebiges Sprite über seinen Bezeichner.",
    "snippet11-helptext02" : "Nun kannst du überprüfen, ob das Sprite an einem bestimmten Punkt ist, die Maus oder ein anderes Sprite oder eine spezielle Farbe berührt.",
    "snippet11-code" : "const myTest01 = async function (t) {\n    let mySprite = t.getSprite('spriteName');\n    \n    // Check if sprite with name 'spriteName' is touching point (20|40).\n    mySprite.isPointInBounds(20, 40);\n\n    // Check if sprite with name 'spriteName' is touching the mouse pointer.\n    mySprite.isTouchingMouse();\n\n    // Check if sprite with name 'spriteName' is touching sprite with name 'spriteName2'.\n    mySprite.isTouchingSprite('spriteName2');\n    \n    // Check if sprite with name 'spriteName' is touching the color white = RGB(255, 255, 255). \n    mySprite.isTouchingColor([255,255,255]);\n\n    t.end();\n}",
    "snippet11-shortcode" : "let mySprite = t.getSprite('spriteName');\nmySprite.isPointInBounds(20, 40);\nmySprite.isTouchingMouse();\nmySprite.isTouchingSprite('spriteName2');\nmySprite.isTouchingColor([255,255,255]);"
}
